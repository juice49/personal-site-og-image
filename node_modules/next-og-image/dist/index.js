var path = require('path');

function getBaseUrl() {
  if (process.env.OG_IMAGE_BASE_URL) {
    return process.env.OG_IMAGE_BASE_URL;
  }

  if (process.env.VERCEL_URL) {
    return `https://${process.env.VERCEL_URL}`;
  }
}

function getCleanPath(path$1) {
  const cleanPath = [...path$1];
  const finalElement = path$1[path$1.length - 1];
  const extension = path.extname(finalElement);
  cleanPath.splice(-1, 1, path.basename(finalElement, extension));
  return {
    path: cleanPath,
    extension
  };
}

const chromium = require('chrome-aws-lambda');

const playwright = require('playwright-core');

async function getImage(baseUrl, path) {
  const browser = await playwright.chromium.launch({
    args: chromium.args,
    executablePath: await chromium.executablePath,
    headless: chromium.headless
  });
  const context = await browser.newContext({
    viewport: {
      width: 2048,
      height: 1260
    }
  });
  const page = await context.newPage();
  await page.goto([baseUrl, ...path].join('/'));
  const screenshot = await page.screenshot();
  await browser.close();
  return screenshot;
}

const YEAR_SECONDS = 31536000;
function createHandler() {
  return async function handler(req, res) {
    try {
      const {
        path,
        extension
      } = getCleanPath(req.query.path);
      const baseUrl = getBaseUrl();

      if (extension !== '.png') {
        res.statusCode = 404;
        res.setHeader('Content-Type', 'text/html');
        res.end('<h1>Not Found</h1>');
        return;
      }

      if (!baseUrl) {
        throw new Error('No `OG_IMAGE_BASE_URL` or `VERCEL_URL` environment variable found.');
      }

      const image = await getImage(baseUrl, path);
      res.statusCode = 200;
      res.setHeader('Content-Type', 'image/png');
      res.setHeader('Cache-Control', `public, immutable, no-transform, s-maxage=${YEAR_SECONDS}, max-age=${YEAR_SECONDS}`);
      res.end(image);
    } catch (error) {
      res.setHeader('Content-Type', 'text/html');
      res.end('<h1>Internal Error</h1><p>Sorry, there was a problem.</p>');
      console.error(error);
    }
  };
}

exports.createHandler = createHandler;
//# sourceMappingURL=index.js.map
